{"meta":{"title":"Navaid · 柰蔚德","subtitle":"","description":"Blog & Notes","author":"NavaidX","url":"https://navaidx.github.io","root":"/"},"pages":[{"title":"","date":"2023-07-17T16:29:00.073Z","updated":"2022-04-19T13:39:56.489Z","comments":true,"path":"404.html","permalink":"https://navaidx.github.io/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"","date":"2023-07-12T04:22:25.089Z","updated":"2023-07-12T04:22:25.089Z","comments":true,"path":"about/index.html","permalink":"https://navaidx.github.io/about/index.html","excerpt":"","text":"个人介绍我是Eyton，现坐标新加坡，目前在读计算机专业，兴趣比较广泛。 有关名字&头像 头像为俄语字母“И”，ИТОН（Eyton）的首字母。同时，把“И”水平翻转后可以得到“Navaid”的首字母“N”。 一些爱好 编程语言学习，hexo博客搭建等 电脑软件教学，台式装机、硬件搭配等 喜欢各种二创作品 Hi-Fi 民航爱好者 欢迎同道中人与我沟通和交流。 编辑于2023年1月9日"},{"title":"所有分类","date":"2022-07-11T07:28:51.333Z","updated":"2022-07-09T15:34:01.530Z","comments":true,"path":"categories/index.html","permalink":"https://navaidx.github.io/categories/index.html","excerpt":"","text":""},{"title":"cradle","date":"2022-07-22T05:49:00.000Z","updated":"2023-07-22T06:12:01.896Z","comments":true,"path":"cradle/index.html","permalink":"https://navaidx.github.io/cradle/index.html","excerpt":"本博客采用aBowman提供的cradle牛顿摆组件。","text":"本博客采用aBowman提供的cradle牛顿摆组件。"},{"title":"","date":"2023-07-17T19:04:26.060Z","updated":"2022-07-04T17:23:30.478Z","comments":true,"path":"friends/friends.json","permalink":"https://navaidx.github.io/friends/friends.json","excerpt":"","text":"[{\"group\":null,\"description\":null,\"items\":[{\"title\":null,\"avatar\":null,\"url\":null,\"screenshot\":null,\"keywords\":null,\"description\":null},{\"title\":null,\"avatar\":null,\"url\":null,\"screenshot\":null,\"keywords\":null,\"description\":null}]}]"},{"title":"","date":"2023-07-20T12:07:13.596Z","updated":"2023-07-20T12:07:13.596Z","comments":true,"path":"help/index.html","permalink":"https://navaidx.github.io/help/index.html","excerpt":"","text":"如果需要帮助、交流或者是提建议，可以在下方评论里留言，也可以通过邮箱「邮箱」联系我。"},{"title":"我的朋友们","date":"2023-07-18T07:03:45.114Z","updated":"2023-07-18T07:03:45.114Z","comments":true,"path":"friends/index.html","permalink":"https://navaidx.github.io/friends/index.html","excerpt":"欢迎互加友链。","text":"欢迎互加友链。 需要添加友链的朋友，可以参考如下的友链规范: 123456- title: # 名称 avatar: # 头像 url: # 链接 screenshot: # 截图 keywords: # 关键词 description: # 描述 下面附上我的友链信息： 12345678- title: Navaid · 柰蔚德 avatar: https://s2.loli.net/2023/07/12/qAp8njrWRZlCaYx.png url: https://www.navaid.de/ screenshot: https://s2.loli.net/2023/07/18/DPzIhlRXGUb5cJ3.png keywords: - Coding - ACG description: Ю"},{"title":"","date":"2022-07-11T07:28:52.117Z","updated":"2022-04-19T13:33:23.855Z","comments":true,"path":"mylist/index.html","permalink":"https://navaidx.github.io/mylist/index.html","excerpt":"","text":""},{"title":"revolvermaps","date":"2022-07-06T14:26:44.000Z","updated":"2022-07-06T14:48:56.620Z","comments":true,"path":"revolvermaps/index.html","permalink":"https://navaidx.github.io/revolvermaps/index.html","excerpt":"本博客采用revolvermaps实现实时访客统计的效果。","text":"本博客采用revolvermaps实现实时访客统计的效果。"},{"title":"所有标签","date":"2022-07-11T07:28:52.345Z","updated":"2022-07-09T15:33:45.799Z","comments":true,"path":"tags/index.html","permalink":"https://navaidx.github.io/tags/index.html","excerpt":"","text":""},{"title":"建站历程","date":"2023-07-11T19:04:20.586Z","updated":"2023-07-01T10:35:34.108Z","comments":true,"path":"timeline/index.html","permalink":"https://navaidx.github.io/timeline/index.html","excerpt":"","text":"2023-07-01 添加BotStar对话Bot——Navaid 2023-01-13 转用Giscus评论系统 恢复了博客内部分图片的显示 2023-01-09 域名变更为https://makinairisu.github.io/ 之前使用的imagehub被停用，无法显示图片（2023年之前的博客将无法显示所有图片），后续将采用别的手段显示博客图片 2022-07-09 博客更名为Navaid 2022-07-07 创建“建站历程”文档 2022-07-06 添加revolvermaps组件 添加载入动画和互动标题 2022-07-05 转用Giscus评论系统 替换部分图标 2022-07-04 更改侧边栏组件 2022-07-03 加入分类、标签、友链等链接 更改标题栏 2022-07 完善博客界面 2022-04-23 添加必要信息 使用不蒜子统计 2022-04-22 发布第一篇博客 使用来必力（livere）评论系统 2022-04-18 功能测试 2022-04-17 正式建站，并将博客命名为Neo-Torifune，使用Volantis主题 2022-04 部署博客"}],"posts":[{"title":"Hexo博客添加天气组件","slug":"Hexo博客添加天气组件","date":"2023-07-20T05:02:33.000Z","updated":"2023-07-20T17:58:21.092Z","comments":true,"path":"2023/07/20/Hexo博客添加天气组件/","link":"","permalink":"https://navaidx.github.io/2023/07/20/Hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E5%A4%A9%E6%B0%94%E7%BB%84%E4%BB%B6/","excerpt":"可以给博客添加的天气组件有很多，比如心知天气、天气网等。本文介绍的是在hexo博客的导航栏处添加天气API提供的组件。","text":"可以给博客添加的天气组件有很多，比如心知天气、天气网等。本文介绍的是在hexo博客的导航栏处添加天气API提供的组件。 天气API天气API提供了很多网页插件，下方是网页链接。 天气API的网页插件一览 我选择的是第一个网页插件。具体显示效果如下图所示： 网页插件展示 植入选择好合适的网页插件后可以点击组件左下角的“查看代码”可以获得一段html代码。 复制刚刚的html代码，现在需要把它转成javascript，需要用到下面的工具。 html&#x2F;js互转工具 转换好之后在”博客根目录\\themes\\volantis\\source\\js”下新建一个js文件，例如wheather.js。 我使用的是volantis主题，其它主题的路径可能有所不同。 接着把转换好的代码放到这个js文件里。 最后在”博客根目录\\themes\\volantis\\layout_partial”里的header.ejs文件里加入如下代码，插入位置在&lt;div class=&quot;m_search&quot;&gt;前。 123&lt;!--天气组件--&gt;&lt;div id=&quot;weather&quot;&gt;&lt;/div&gt;&lt;script src=&quot;/js/wheather.js&quot;&gt;&lt;/script&gt; hexo三连提交查看效果。如果组件位置有问题可以修改wheather.js或者你刚才新建的js文件进行调整。 具体需改内容：frameborder=\\&#39;0\\&#39; width=\\&#39;120\\&#39; height=\\&#39;55\\&#39; allowtransparency=\\&#39;true\\&#39; frameborder可以调整边框粗细。数值越大边框越粗。 width可以调整组件的水平位置。数值越大，组件越靠左。 height可以调整组件的竖直位置。数值越大，组件越靠上。 allowtransparency是背景透明选项。","categories":[{"name":"博客","slug":"博客","permalink":"https://navaidx.github.io/categories/%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://navaidx.github.io/tags/Hexo/"}]},{"title":"Hexo博客使用本地图片","slug":"Hexo博客使用本地图片","date":"2023-07-11T18:23:52.000Z","updated":"2023-07-21T04:44:50.951Z","comments":true,"path":"2023/07/12/Hexo博客使用本地图片/","link":"","permalink":"https://navaidx.github.io/2023/07/12/Hexo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/","excerpt":"之前一直把图片存在图床上。但是，图床可能会终止服务，这会对我们的博客项目产生影响。通过插件，可以实现本地图片直接通过git和md文件一起上传到github的效果，并可以使用相对路径访问图片。","text":"之前一直把图片存在图床上。但是，图床可能会终止服务，这会对我们的博客项目产生影响。通过插件，可以实现本地图片直接通过git和md文件一起上传到github的效果，并可以使用相对路径访问图片。 安装hexo-asset-image1npm install hexo-asset-image --save 改路径hexo在升级的过程中造成了一些问题，比如hexo-asset-image插件失效。 需要把插件里index.js的第58行： 1$(this).attr(&#x27;src&#x27;, config.root + link + src); 改成： 1$(this).attr(&#x27;src&#x27;, src); 修改_config.yml打开theme里的_config.yml，添加如下代码： 1post_asset_folder: true 一些写法 html格式写法： 1&lt;img src=&quot;/文章标题/图片名.png&quot;&gt; Volantis主题写法： 1&#123;% image 文章标题/图片名.png::alt=文字内容 %&#125; 遇到的问题 封面图显示出现问题（路径错误）。 解决方案： 在source文件夹下创建covers文件夹（文件夹名随意），里面存放封面图（heading）。文章首部写入如下代码即可： 1headimg: &#x27;/covers/xxx.jpg&#x27;","categories":[{"name":"博客","slug":"博客","permalink":"https://navaidx.github.io/categories/%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://navaidx.github.io/tags/Hexo/"}]},{"title":"常用的Unix指令","slug":"常用的Unix指令","date":"2023-01-16T17:06:22.000Z","updated":"2023-07-18T06:49:01.051Z","comments":true,"path":"2023/01/17/常用的Unix指令/","link":"","permalink":"https://navaidx.github.io/2023/01/17/%E5%B8%B8%E7%94%A8%E7%9A%84Unix%E6%8C%87%E4%BB%A4/","excerpt":"学习一些Unix指令可以更好的帮助我们理解Unix，并能通过简单的代码操作实现一些操作。","text":"学习一些Unix指令可以更好的帮助我们理解Unix，并能通过简单的代码操作实现一些操作。 查看各个指令的作用（Manual）man指令可以查看各个指令的作用，例（查看ls指令的作用）： 1man ls Unix目录（Unix Directory） Symbol Directory &#x2F; Root ~ Home . Current .. Parent pwd (Print Working Directory) 的作用是获得目录的路径. pwd -P 可以获得目录的物理路径 (physical), pwd -L 可以获得目录的逻辑路径 (logical). 123pwdpwd -Ppwd -L 在pe里，可以得到一个路径，例： 1/home/m/makina 查看directory里的内容 1ls 获取更多信息 1ls -F 查看ls指令的使用方法 1man ls 新建workshop目录 1mkdir workshop 删除workshop目录 1rmdir workshop 进入workshop目录 1cd workshop 进入root目录 1cd 下载文件（Download）下载test.txt 1wget https://www.comp.nus.edu.sg/~ooiwt/unix-workshop/test.txt 对文件和目录的操作复制（Copy）复制文件（test.txt） 1cp test.txt foo.txt 复制整个workshop目录里的文件到copy目录，-r代表重复的，workshop .代表所有文件 1234cd ..mkdir copycd copycp -r ../workshop . 重命名（Rename）重命名文件（foo.txt → bar.txt） 1mv foo.txt bar.txt 移动（Move）mv指令还可以把workshop目录里的foo.txt移动到当前目录下 1mv ../copy/workshop/foo.txt . mv指令会overwrite（覆盖）原来的文件 移除（Remove）移除foo.txt 1rm foo.txt 可以加一个-i来防止移除错文件 1rm -i bar.txt 查看文件（Catenate File）cat指令可以快速查看文件内容 1cat test.txt 同样的，直接执行cat指令，然后再输入想要打开的文件也可以，按按Ctrl + D推出 1cat less指令和cat指令类似，less指令适合读一些大文件 1less test.txt 在less指令下，按{% kbd Space查看下一页，按B查看下一页，按Q退出 %} wc指令可以（按顺序）显示文件的行数、词数&#x2F;字数、字符数。 1wc test.txt 输出重定向（Output Redirection）用&gt;指令将wc test.txt的内容覆盖到test.count里 1wc test.txt &gt; test.count 用&gt;&gt;指令将wc test.txt的内容添加到test.count里（新建一行） 1wc test.txt &gt;&gt; test.count 输入重定向（Input Redirection）和输出重定向同理，改用&lt;指令。 文件的权限（File Permission Management）权限（Permission） Permission 对文件的影响（Effect on File） 对目录的影响（Effect on directory） r（4） 读取文件内容（reading the content of a file） 读取目录的文件名称（read the names of the files in the directory） w（2） 写入文件 (writing into a file) 创建&#x2F;删除&#x2F;重命名目录下的文件（create&#x2F;delete&#x2F;rename files in the directory） x（1） 执行文件（executing a file） 获取目录下文件的信息（access contents and meta-info (size, creation time) of files in the directory） 文件的权限将会以字母（Symbol）或数字（Number）形式呈现。字母形式会按照rwx的顺序展示。例：r-x，rw-，rwx。其中，“-”代表无权限。数字形式一般为r，w，x三者之和，r代表4，w代表2，x代表1。例：数字5等同于字母形式的r-x。 用户（User）Unix将用户分为三个群体，即u（user），g（group）和o（others）。u表示文件的拥有者，g表示和文件拥有者处于同一组的用户，o表示其他用户。 如果一个文件权限会以u，g和o的顺序呈现，例：644或rw-r–r–。这就表示拥有者可以读（read）和写（write），组用户可以读（read），其他用户可以读（read）。 查看权限（Check permission）用ls -l指令查看文件权限 1ls -l test.txt 得到的结果，例： 1-rw-r--r--@ 1 makina staff 64 Jul 28 09:52 test.txt 忽略最前面的-和结尾的@ 更改、移除权限（Change or remove permission）用chmod指令更改文件权限，例（结果为-rw-rw-rw-@）： 1chmod 666 test.txt 用chmod指令移除权限，例（移除o-“其他用户”的r-“读取”权限）： 1chmod o-w test.txt","categories":[{"name":"CS2030S","slug":"CS2030S","permalink":"https://navaidx.github.io/categories/CS2030S/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://navaidx.github.io/tags/Java/"},{"name":"Unix","slug":"Unix","permalink":"https://navaidx.github.io/tags/Unix/"}]},{"title":"PE连接到个人Github账户","slug":"PE连接到个人Github账户","date":"2023-01-12T16:06:47.000Z","updated":"2023-07-18T06:41:52.981Z","comments":true,"path":"2023/01/13/PE连接到个人Github账户/","link":"","permalink":"https://navaidx.github.io/2023/01/13/PE%E8%BF%9E%E6%8E%A5%E5%88%B0%E4%B8%AA%E4%BA%BAGithub%E8%B4%A6%E6%88%B7/","excerpt":"我们已经学习了PE的使用方法，下面就来把PE连接到GitHub账户上，这样就可以通过Git来接收和发送文件了。","text":"我们已经学习了PE的使用方法，下面就来把PE连接到GitHub账户上，这样就可以通过Git来接收和发送文件了。 首先你要有一个Github账户。 并连接上了SoC VPN，详细操作见上一篇或这篇完整的使用方法。 第一步：创建.gitconfig文件首先连接到pe host。例： 1ssh makina@pe112.comp.nus.edu.sg 输入密码，登录成功后需要新建一个.gitconfig文件，输入以下代码。想了解更多创建文件的方法可以看这篇文章。 1cat &gt; .gitconfig 在.gitconfig文件里填写： 12345[user] name = Your Name email = Your Email[github] user = Your GitHub Username 其中，Your Name可以是你的任何名字，Your Email是你Github注册的邮箱，Your GitHub Username是你的Github用户名，（不是Github昵称）。例： 12345[user] name = makina email = makinairisu@grisaia.com[github] user = TunafishMan 然后Ctrl + D保存文件。下面的代码是查看文件内容的： 1cat .gitconfig 这一行代码是检查你的user name的，你的user name正常是显示正确的。 1git config --get github.user 第二步：创建.gitconfig文件GitHub官方文档 在PE下输入以下代码，其中&#121;&#x6f;&#117;&#114;&#95;&#x65;&#109;&#97;&#x69;&#108;&#64;&#x65;&#120;&#97;&#x6d;&#x70;&#108;&#x65;&#x2e;&#99;&#111;&#x6d;是你Github注册的邮箱 1ssh-keygen -t ed25519 -C &quot;your_email@example.com&quot; 之后会出现一堆提示，全部Enter就好了，（即保存位置默认，passphrase默认空白）。 然后你会获得一串代码，例： 1ssh-ed25519 qwertycWDWDuiopaxsdfgAhjkcsvvrvgdDNKgvhbthbOTbfzxcvbnm makina@comp.nus.edu.sg 把上面这段代码复制到Github上，放在SSH Key的位置。可参考GitHub官方文档 GitHub SSH Key配置 第三步：检查Github是否连接成功在PE下输入以下代码： 1ssh -T git@github.com 如果出现 1Hi makina! You&#x27;ve successfully authenticated, but GitHub does not provide shell access. 说明成功连接。 如果出现 1git@github.com: Permission denied (publickey). 说明连接失败。","categories":[{"name":"CS2030S","slug":"CS2030S","permalink":"https://navaidx.github.io/categories/CS2030S/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://navaidx.github.io/tags/Java/"},{"name":"PE","slug":"PE","permalink":"https://navaidx.github.io/tags/PE/"},{"name":"Github","slug":"Github","permalink":"https://navaidx.github.io/tags/Github/"}]},{"title":"PE(Program Environment)简介及使用例","slug":"PE-Program-Environment-简介及使用例","date":"2023-01-12T06:49:15.000Z","updated":"2023-07-19T08:52:25.954Z","comments":true,"path":"2023/01/12/PE-Program-Environment-简介及使用例/","link":"","permalink":"https://navaidx.github.io/2023/01/12/PE-Program-Environment-%E7%AE%80%E4%BB%8B%E5%8F%8A%E4%BD%BF%E7%94%A8%E4%BE%8B/","excerpt":"我们可以通过SSH，即Secure SHell访问校园的计算机服务，它可以直接通过Terminal（mac命令行）或iTerm访问。","text":"我们可以通过SSH，即Secure SHell访问校园的计算机服务，它可以直接通过Terminal（mac命令行）或iTerm访问。 这样我们就可以直接使用校园服务器的PE（Program Environment）了，下面就来实际操作一下。 建议先学习一定的Unix及命令行相关知识。 第一部分创建并激活SoC Unix账户点击此处进入创建SoC Unix账户（SoC Unix account）。点击此处进入激活SoC Unix账户（SoC Unix account）。登录进去把里面的三个选项都enable了。 下载并安装命令行软件MAC：使用自带Terminal Terminal 或下载安装 iTerm2 Windows：使用自带命令行（CMD） CMD 下载安装并VPN（）具体步骤可以参考这篇文章。首先要下载FortiClientVPN。 FortiClientVPN 安装完打开选择REMOETE ACCESS。里面新建一个VPN方案，选择SSL-VPN，具体填写内容如下图所示。 VPN配置方案 可以选择Save Login以保存自己的NUS NET账号。保存完方案后输入NUS NET账户和密码就可以使用了。 使用SSH命令连接到REMOTE HOST在命令行（或Terminal、iTerm2）中输入以下代码： 1ssh username@hostname 将username替换成自己SoC Unix账户的用户名，hostname替换成pe112.comp.nus.edu.sg。（其中pe1xx也可以替换为pe111, pe112, pe113, pe114, pe117, pe118. pe119, pe120）例： 1ssh makina@pe112.comp.nus.edu.sg 如果成功会提示输入密码，（如果是第一次使用host，比如host pe112，Terminal会问你一个问题，你回答yes就可以了），然后输入你的SoC Unix密码就可以了。 1yes 一些常见的报错1ssh: Could not resolve hostname pe1xx.comp.nus.edu.sg 你没有使用VPN。（或者你直连了） 1Connection closed by 192.168.48.xxx port 22 你的SoC Unix账户里的SoC computer clusters没有enable。点击此处前往激活。 1Permission denied, please try again 你密码输错了，如果忘记密码点击此处重制。 1Could not chdir to home directory /home/o/ooiwt: Permission denied 访问权限受限，这种情况比较少见。需要寻求SoC IT Unit的帮助。联系方式：https://rt.comp.nus.edu.sg/。 第二部分转移文件把本地文件传到pe host上。例1（把lab01里所有.java结尾的文件上传）： 1scp makina@pe112.comp.nus.edu.sg:~/lab01/*.java . 例2（把lab01里特定的一个.java文件上传）： 1scp Hello.java makina@pe112.comp.nus.edu.sg:~/lab01 设置SSH Keys下面这个命令可以生成两个key，一个是private key：id_rsa（存放在本地-hidden ~&#x2F;.ssh directory），另一个是public key：id_rsa.pub（存放在pe host上）。 1ssh-keygen -t rsa 用ssh-copy-id如果你安装了ssh-copy-id，可以使用以下代码： 1ssh-copy-id username@pe112.comp.nus.edu.sg 这里你需要再输入一次密码，之后就可以不输密码了。 用scp1cat id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys 检查网络连接情况在pe里运行： 1screen 关闭显示： 1screen -r","categories":[{"name":"CS2030S","slug":"CS2030S","permalink":"https://navaidx.github.io/categories/CS2030S/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://navaidx.github.io/tags/Java/"},{"name":"PE","slug":"PE","permalink":"https://navaidx.github.io/tags/PE/"}]},{"title":"索尼PCM-D50+罗兰CS-10EM录音相关","slug":"索尼PCM-D50-罗兰CS-10EM录音相关","date":"2022-12-08T05:07:27.000Z","updated":"2023-07-18T06:52:35.945Z","comments":true,"path":"2022/12/08/索尼PCM-D50-罗兰CS-10EM录音相关/","link":"","permalink":"https://navaidx.github.io/2022/12/08/%E7%B4%A2%E5%B0%BCPCM-D50-%E7%BD%97%E5%85%B0CS-10EM%E5%BD%95%E9%9F%B3%E7%9B%B8%E5%85%B3/","excerpt":"D50的自带麦克风直接录耳机，无论是还是塞子还是大耳，都感觉差点意思，耳机基本上都会漏音。所以我选择搞一个带罗兰CS-10EM的人头麦，充当外置麦克风。","text":"D50的自带麦克风直接录耳机，无论是还是塞子还是大耳，都感觉差点意思，耳机基本上都会漏音。所以我选择搞一个带罗兰CS-10EM的人头麦，充当外置麦克风。 人头麦框架用纸箱代替（成本接近0）。两侧有开孔，有软管放置在孔内。 当然，这么搞效果肯定不如专业人头麦，但话又说回来，即便是专业的麦克风也不能保证声音就一定是能100%还原被录音产品的声音表现，而且不同人选用的回放设备（耳机、音响）也不同，各式耳机和音响的音染（失真程度）不同，每个人耳朵结构也不一样，这才说云试听只能图一乐。所以追求“录音文件接近原声音的程度”就好了，在有限的预算和时间里搭配合适的设备才是最好的。 人头麦框架如下图所示（耳朵还没贴上去）： 人头麦框架 罗兰CS-10EM本身是可以当作一款asmr录音耳机使用的，它的两个耳塞背后都有麦克风。我测试下来发现这个耳机的录音效果其实还不错。仔细观察罗兰CS-10EM会发现它有3.5接头，红的是用来录音的，黑的是用来监听的。 罗兰CS-10EM耳机展示 于是就可以这么操作，把耳机这样连到D50上。红接头连到右边的麦克风🎤口上，黑接头连到左边的耳机孔上，这样就可以边录音边监听了。或者左边耳机孔接其他耳机也可以。录音各式我基本上用的都是96&#x2F;24，最后生成的就是波形文件嘛。 索尼PCM-D50+罗兰CS-10EM连接方式展示 左边开关把Line调到麦克风🎤。 麦克风🎤开关 总结下，如果想测频响曲线什么的肯定要更专业的监听麦克风了，就录音效果来讲，这毕竟还是一个asmr耳机，CS-10EM的人头麦还是可以的。","categories":[{"name":"Hi-Fi","slug":"Hi-Fi","permalink":"https://navaidx.github.io/categories/Hi-Fi/"}],"tags":[{"name":"录音","slug":"录音","permalink":"https://navaidx.github.io/tags/%E5%BD%95%E9%9F%B3/"}]},{"title":"Python环境搭建","slug":"Python环境搭建","date":"2022-07-17T02:33:57.000Z","updated":"2023-07-18T06:42:26.170Z","comments":true,"path":"2022/07/17/Python环境搭建/","link":"","permalink":"https://navaidx.github.io/2022/07/17/Python%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/","excerpt":"本文将展示Python环境搭建的两种方法（Windows适用）。一是使用Anaconda+Jupyter Notebook作为编辑器，二是使用VScode作为编辑器。","text":"本文将展示Python环境搭建的两种方法（Windows适用）。一是使用Anaconda+Jupyter Notebook作为编辑器，二是使用VScode作为编辑器。 Anaconda+Jupyter Notebook 和 VScode 两种Python的搭建方式选择一种就行，当然，都搭建也不冲突。 使用Jupyter Notebook下载和安装Anaconda首先需要下载Anaconda Anaconda Anaconda的安装只要按照提示走就行了， 1 next&gt; 2 I agree&gt; 3 next&gt; 4 选择安装目录（可以自定义）然后点next -&gt; 两个选项：1. 是否添加Anaconda到path。2. 是否安装Python。选择完点install&gt;（第二个要勾上，第一个可以不勾。如果想添加Anaconda到path的可以加上第一个选项。当然，安装完再添加Anaconda到path也是可以的，可以参考【环境配置】windows10中将anaconda添加到环境变量） 5 等待安装。。。 6 finish&gt; Anaconda自带一个Python（刚刚勾选了），因此可以不用额外下载Python按照包。（我这里的最新版Anaconda自带的Python版本是3.9.12） 启动Jupyter Notebook安装完Anaconda后，打开开始菜单就能看到Jupyter Notebook (Anaconda)。 点开Jupyter Notebook (Anaconda) 会弹出一个命令框，然后询问你要选择哪个浏览器打开。选择完成后即可使用。它默认是部署到本地的，网址是：”http://127.0.0.1:8888/&quot;，即”http://localhost:8888/tree&quot; 页面上会显示你电脑“用户文件夹”里的文件。关闭浏览器中的窗口并不会停止程序，需要在命令框里键入Ctrl + C。 用Windows Powershell打开Jupyter Notebook打开Windows Powershell，现在直接在命令行里输入”jupyter notebook”可能会报错。这时，建议重新下载jupyter，需要在命令行里输入代码： 镜像安装（推荐）： 1pip install jupyter -i https://pypi.tuna.tsinghua.edu.cn/simple 常规安装： 1pip install jupyter 安装完后重启Windows Powershell，在命令行输入“jupyter notebook”然后enter就可以打开Jupyter Notebook了。 关于切换目录：在打开Jupyter Notebook前，先cd到你要查看的目录，我这里填的路径是“F:\\Codes”，大家根据自己的情况调整。不cd就是默认显示你的“用户文件夹”里的文件。 打开后会显示你输入目录下的内容。 测试新建一个ipynb文件（点击右上角New，然后点击Python3）， 在ipynb文件里测试Python代码。 1print(&quot;hello world&quot;) 使用VScode下载和安装Python和VScode下载Python和VScode安装包，根据自己的需要选择版本，Python我选择的是当前最新的版本3.10.5。 Python VScode Python和VScode下载和安装就不过多赘述了，下载安装包后按提示安装即可。Python的默认安装目录是”C:\\Users\\你的用户名\\AppData\\Local\\Programs\\Python” 检查安装打开cmd或Windows Powershell，运行python –V和pip -V查看Python和pip的版本。 1python –V 1pip -V 安装VScode插件Python打开VScode，找Python插件。左边边导航栏上从左往下数第五个图标是扩展插件。搜索并安装Python扩展，下图的Python扩展插件必须下载，其它的插件可以自行选择。 重启VScode，打开目录，新建一个py文件，测试下Python代码。（右键Run Python File或Run Section&#x2F;Line） 1print(&quot;hello world&quot;) 安装Jupyter Notebook插件新建一个ipynb文件，测试Python代码。 1print(&quot;hello world&quot;) 如果发现不能运行，提示需要安装Jupyter插件，点击Install（安装），安装需要一段时间，安装完就能用了运行了。下图是一个成功运行的例子。 如果还不能运行，可能出了一些问题，可以通过升级和安装新插件来修复，直接通过pip install来安装（在VScode的命令行里运行pip install）。下面给出一些解决方案。 ipykernel可能需要升级 升级ipykernel。 1pip install --upgrade ipykernel Jupyter插件安装失败 试试再安装下？ 1pip install jupyter pyzmq版本过新 检查pyzmq版本。 1pip list 如果之前的版本卸载之前的版本过高，可以卸载，然后安装旧版本的。常规安装， 12pip uninstall pyzmqpip install pyzmq==19.0.2 或安装镜像安装。 12pip uninstall pyzmqpip install -i https://pypi.tuna.tsinghua.edu.cn/simple --trusted-host pypi.tuna.tsinghua.edu.cn --user pyzmq==19.0.2 Jupyter库没有完整安装 检查Jupyter库 1jupyter --version 解决方法，在VScode的命令行里运行以下代码（上面检查检查Jupyter库时发现没有安装的可以用pip install）： 1pip install 你缺失的组件 pip可能需要升级 升级pip 1python -m pip install --upgrade pip","categories":[{"name":"Python","slug":"Python","permalink":"https://navaidx.github.io/categories/Python/"}],"tags":[{"name":"VScode","slug":"VScode","permalink":"https://navaidx.github.io/tags/VScode/"},{"name":"Python","slug":"Python","permalink":"https://navaidx.github.io/tags/Python/"}]},{"title":"Hexo博客搭建与心得","slug":"Hexo博客搭建与心得","date":"2022-07-12T01:54:39.000Z","updated":"2023-07-18T07:13:50.786Z","comments":true,"path":"2022/07/12/Hexo博客搭建与心得/","link":"","permalink":"https://navaidx.github.io/2022/07/12/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%8E%E5%BF%83%E5%BE%97/","excerpt":"现在不少人会在博客网站、论坛上发表文章，也有不少人选择搭建个人博客。个人博客的好处在于发表文章的限制少，方便管理、可以自由选择主题。同时，个人博客里的文章也可以帮助人们更好的分享知识、记录博主的成长。","text":"现在不少人会在博客网站、论坛上发表文章，也有不少人选择搭建个人博客。个人博客的好处在于发表文章的限制少，方便管理、可以自由选择主题。同时，个人博客里的文章也可以帮助人们更好的分享知识、记录博主的成长。 这篇文章将主要分享博客搭建（Windows平台），以及我对Hexo的一些心得和踩过的坑。 本文会持续更新。 什么是Hexo个人博客搭建的平台有很多，比如Hexo、Wordpress、Ghost、Vuepress等。相比之下，搭建Hexo博客的好处在于操作简单，适合所有的用户，并且有大量主题可以选择。而且，Hexo博客属于静态博客，相对来说比较安全。 Hexo是一个快速、简洁且高效的博客框架 来自Hexo官网 Hexo官网 搭建流程网上很多文章都有说到，这里就简单概括一下吧。 安装工具以下搭建流程适合Windows平台，Mac系统和Linux系统上的操作步骤可能会有所不同。 首先要下载两个工具： Git Nodejs 安装到默认路径即可非必要下载：代码编辑器，如VScode, Sublime等。只要你能打开和修改代码文件就行。我推荐VScode因为它可以编辑大部分格式的文件，如markown，yml，js, css等。 我这边的软件版本如下：Nodejs：v16.14.2npm：8.5.0 安装hexo在电脑上新建一个文件夹，作为本地仓库。打开进入仓库。右键，点击Git Bash Here会跳出命令框。先查看Nodejs和npm的版本，确认它们已经完整安装。 12node -vnpm -v 可选择安装cnpm，主要是为了提速，也可以不下载。 1npm install -g cnpm --registry=https://registry.npm.taobao.org 检查cnpm版本。 1cnpm -v 用npm或安装hexo（如果用cnpm就把代码里的npm改成cnpm）。 12npm install -g hexo-clinpm install hexo-cli -g 初始化Hexo博客，cd是定位，后面加你的文件夹路径，例：&#x2F;f&#x2F;Studies&#x2F;hexo&#x2F; 12cd /f/Studies/hexo/ # 你的本地文件夹位置hexo init 生成文件，启动服务。 12hexo ghexo s 打开浏览器输入以下网址即可查看Hexo本地博客网页：http://localhost:4000 运行完记得停止Hexo Service：Ctrl + C 电脑上可能会出现端口占用的问题导致网页加载失败，可以参考这篇文章：解决端口号冲突（两种解决方案） 更换主题关闭Hexo Service后继续使用Git Bash。这里可以选择Hexo主题。基本上每个主题里都会有安装代码。以Volantis（本博客使用主题）为例，可执行以下代码。 Hexo主题页面 12cd /f/Studies/hexo/ # 你的本地文件夹位置git clone https://github.com/volantis-x/demo.git &amp;&amp; cd demo &amp;&amp; npm i &amp;&amp; hexo s Volantis主题 根据提示操作即可。在博客文件夹里有三个文件需要注意，分别是站点配置文件：（根文件夹下的）_config.yml主题配置文件：（根文件夹下的）_config.volantis.yml主题配置文件：（theme&#x2F;volantis&#x2F;路径下的）_config.yml。 _config.yml可以更改站点信息，包括网页标题，提交仓库等 _config.volantis.yml和theme&#x2F;volantis&#x2F;路径下的_config.yml可以更改主题配置，主要是修改外观，添加文字内容的 其它主题应该也是类似的。 记得做好备份工作 部署博客可以选择在Github、Gitee或其它任意一个代码托管平台上创建自己的账户。这里以Github为例，你需要创建一个仓库，命名为“username.github.io”。（username是你的Github用户名，并非昵称，点开你的profile，看下网址就知道你的昵称了）Gitee应该是同理，新建一个仓库“username.gitee.io”。（Gitee好像每次部署博客需要输入用户信息。） 获取shh key。可以查看Github配置ssh key的步骤（大白话+包含原理解释）。 在_config.yml中修改如下代码。 1234deploy: type: git repository: git@github.com:username/username.github.io.git branch: master 一定要按照这种格式填写。 打开Git Bash，用npm安装deployer，这样就可以部署博客了。 1npm install hexo-deployer-git --save 然后尝试部署。 1hexo cl &amp;&amp; hexo g &amp;&amp; hexo d 可能会出现错误，输入以下代码。 1git init 再次部署应该就能成功。 1hexo d 访问“https://username.github.io”就可以访问你的博客了。开始博客会自带一个“hello world”文章，可以选择删除。 “public”文件夹里的文件会被部署到Github上。 hexo会把markdown文件转为html文件，包括README.md，因此，在上传前建议把public文件夹里的README.html删除，并添加你的README.md。README.md一般存放在source文件夹里。 更新（解决方法）：在config.yml中添加 1skip_render: README.md 写博客打开Git Bash运行以下代码就可以新建文章。 1hexo new post &#x27;文章标题&#x27; 在“你的博客文件夹\\source_posts”目录下可以查看并编辑你的文章。然后就可以开始写文章啦。两个“—”中的内容是文章的基本信息。用“&lt;!–more–&gt;”标签可以分割文章描述和文章主要内容。 最后，掌握一些常用Git Bash命令可以有助于我们快速、高效地使用Hexo。 一键三连（清理文件夹，生成public文件夹，部署） 1hexo cl &amp;&amp; hexo g &amp;&amp; hexo d 缩写 12345hexo cl == hexo clean # 清理hexo g == hexo generate # 生成hexo s == hexo server # 启动本地预览服务hexo d == hexo deploy # 部署hexo n == hexo new # 新建文章 组合 12hexo s -g # 生成、启动本地预览服务hexo d -g # 生成、部署 hexo new 和 hexo new post 都可以生成文章， hexo new page 可以生成一个新的页面。 到现在为止，博客就建好了。接下来就是自行修改主题了，不同主题的博客操作也有些差异，主要还是修改刚刚提到的三个config文件。 心得体会我已经使用了一段时间Hexo博客。总的来说，Hexo博客搭建比较简单，写文章也可以统一用Markdown编写，部署到Github上也比较快。就我个人而言，搭建到基本美化工作结束用了大概一个礼拜，如果操作熟练的话可以更快。使用的过程中我还是遇到了一些小问题，好在它们都比较好解决。我可以给出一些提示和建议，大部分是我遇到的问题，不一定适用于所有人： 添加评论系统 Hexo博客是静态博客，但是也可以添加评论系统。Giscus是最方便部署和操作的评论之一。Livere功能更多，操作也很简单，但是有时会出现广告。Giscus是再Github里建立了一个仓库，并使用Github Discussion功能实现评论功能的。 文章加密 1npm install hexo-blog-encrypt config.yml 12encrypt: enable: true 文档首部添加 12password: 密码message: 密码提示内容 更换文章重要信息 已经部署在网上的文章如果要更换标题、标签、分类等关键信息建议把这些文章剪切到别的位置，总之要从_post文件夹里拿走，部署博客后再把文件放回来，然后再部署一遍。这样做的好处是文章的网址、标签和分类不会出错。 测试与调整 多去尝试修改主题文件，做好备份，用hexo s进行预览。ejs，swig之类的文件要注意格式，否则会报错。 侧边栏插件 一些博客的侧边栏插件很好看。我们可以使用class: page把一个Markdown文件变成侧边栏插件。 问题解决 多参考主题网站给出的文档，绝大多数问题都能在上面找到答案。优质的主题下会有不少讨论和贡献者，这也可以帮助改善主题的搭建和设计。 图片上传 可以用压缩图片的网站，如Online Image Tool和图片压缩在线处理，压缩图片，然后用图床保存图片，写文章的时候直接插入图片的url链接，这样图片加载速度能变快。几个好用的免费图床：路过图床、和Sm.ms。有时候从别的网站扒的WEBP图片会出现加载不出来的情况，可以避免使用过多的WEBP文件（作为封面），而选用PNG或JPEG。 图标使用 博客图标可以使用fontawesome的，上面有静态和动态的图标。也可以使用自己做的图片文件，bmp，png文件都可以。 鼠标特效 一些鼠标特效可能会使网页变卡。 Markdown编辑器 一款好的Markdown编辑器可以提高我们的写作效率。之前用过Typora，体验很好，但它好像转收费了，所有我现在在使用VScode，想用它作为Markdown编辑器的可以参考VScode搭建Markdown环境。 换源 cnpm安装有时比npm安装快。可以用下面的代码进行安装。 1npm install -g cnpm --registry=https://registry.npm.taobao.org SEO-推广 SEO即”推广“，把博客放在百度、谷歌等搜索网站上。如果想推广博客，建议购买域名，不能直接用”https:&#x2F;&#x2F;用户名.github.io“这个网址，因为Github不支持被搜索引擎检索。链接：百度站点管理。 Hexo使用本地图片 查看文章 主题美化永无止境，当然，边学习边修改才是最好的。","categories":[{"name":"博客","slug":"博客","permalink":"https://navaidx.github.io/categories/%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://navaidx.github.io/tags/Hexo/"}]},{"title":"VScode搭建Markdown环境","slug":"VScode搭建Markdown环境","date":"2022-07-09T11:47:49.000Z","updated":"2023-07-18T06:44:27.457Z","comments":true,"path":"2022/07/09/VScode搭建Markdown环境/","link":"","permalink":"https://navaidx.github.io/2022/07/09/VScode%E6%90%AD%E5%BB%BAMarkdown%E7%8E%AF%E5%A2%83/","excerpt":"主流的Markdown编辑器不少，比如著名的Typora、Atom、Haroopad等软件。Dillinger、Markdown Nice等网页版Markdown编辑器也非常好用。而VScode作为一款扩展性强的跨平台编辑器自然也是支持搭建Markdown环境的。","text":"主流的Markdown编辑器不少，比如著名的Typora、Atom、Haroopad等软件。Dillinger、Markdown Nice等网页版Markdown编辑器也非常好用。而VScode作为一款扩展性强的跨平台编辑器自然也是支持搭建Markdown环境的。 优势VScode作为Markdown编辑器的优势在于 免费 可使用多种扩展插件 方便跨平台使用 搭建流程下面将列出部分VScode中常用的Markdown插件 安装Markdown All in One插件 Markdown All in One有很多功能，比如快捷键、生成表格和目录、提供特殊符号等。 安装Markdown Preview Enhanced插件 Markdown Preview Enhanced可以实时预览Markdown文档。 安装Markdown Preview Mermaid Support插件 Markdown Preview Mermaid Support可以帮助使用者绘制各种插图。 安装Markdownlint插件 Markdownlint可以帮助检查语法错误。 一些插件 最后，重启VScode即可使用这些扩展。Markdown文件编辑过程中可使用Markdown Preview Enhanced预览自己编辑的文件（右键文档空白处，单击MPE: 打开侧边预览即可）。 效果展示 总结这样Markdown环境就基本上建成了，并且已经满足大部分Markdown编辑的需求了。当然，VScode里的Markdown插件还要很多，可以根据需求安装，使得我们编辑文档的时候更有效率。","categories":[{"name":"VScode","slug":"VScode","permalink":"https://navaidx.github.io/categories/VScode/"}],"tags":[{"name":"VScode","slug":"VScode","permalink":"https://navaidx.github.io/tags/VScode/"},{"name":"Markdown","slug":"Markdown","permalink":"https://navaidx.github.io/tags/Markdown/"}]},{"title":"VScode更改背景图片","slug":"VScode更改背景图片","date":"2022-07-09T09:58:07.000Z","updated":"2023-07-18T06:44:15.034Z","comments":true,"path":"2022/07/09/VScode更改背景图片/","link":"","permalink":"https://navaidx.github.io/2022/07/09/VScode%E6%9B%B4%E6%94%B9%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87/","excerpt":"VScode(全称Visual Studio Code)是微软的轻量源代码编辑器，支持很多编程语言和插件扩展。它的默认背景是黑色（灰色）的，用户可以通过安装插件来自定义背景图片。","text":"VScode(全称Visual Studio Code)是微软的轻量源代码编辑器，支持很多编程语言和插件扩展。它的默认背景是黑色（灰色）的，用户可以通过安装插件来自定义背景图片。 操作步骤 在VScode中安装background插件。 插件安装完成后，进入扩展设置。 打开settings.json进行编辑 在json文件中添加如下代码： 12345678910111213141516171819202122&#123; &quot;workbench.colorTheme&quot;: &quot;Default Dark+&quot;, &quot;background.customImages&quot;: [&quot;file:///F:/xxx/wp_ATRI.jpg&quot;], //你的自定义背景图 &quot;background.useDefault&quot;: false, &quot;background.style&quot;: &#123; &quot;content&quot;: &quot;&#x27;&#x27;&quot;, &quot;pointer-events&quot;: &quot;none&quot;, &quot;position&quot;: &quot;absolute&quot;, //图片位置 &quot;z-index&quot;: &quot;99999&quot;, &quot;width&quot;: &quot;100%&quot;, //宽度 &quot;height&quot;: &quot;100%&quot;, //高度 &quot;background-position&quot;: &quot;center&quot;, &quot;background-repeat&quot;: &quot;no-repeat&quot;, &quot;background-attachment&quot;: &quot;fixed&quot;, &quot;backfground-size&quot;: &quot;cover&quot;, &quot;opacity&quot;: 0.1 //透明度 &#125;, &quot;workbench.editorAssociations&quot;: &#123; &quot;*.EXE&quot;: &quot;default&quot; &#125;, &quot;background.loop&quot;: true //图片循环，添加这段代码可以使图片在不同窗口中扩展。如果不添加，多开窗口时只有第一个窗口显示壁纸。&#125; 设置完重启VScode就可以看到自定义背景图了。（如果没有显示自定义背景图，查看扩展设置里是否勾选”Background: Use Default“选项，如果是则取消勾选。） 单窗口效果展示 多窗口效果展示 使用background插件后VScode可能会报错(Code安装似乎损坏，请重新安装)。这个bug对实际使用VScode影响不大，只是每次打开VScode都会弹出。 背景图来源：https://atri-mdm.com/special/present/","categories":[{"name":"VScode","slug":"VScode","permalink":"https://navaidx.github.io/categories/VScode/"}],"tags":[{"name":"VScode","slug":"VScode","permalink":"https://navaidx.github.io/tags/VScode/"}]},{"title":"基础进制转换","slug":"基础进制转换","date":"2022-07-03T07:04:12.000Z","updated":"2022-07-10T01:17:54.373Z","comments":true,"path":"2022/07/03/基础进制转换/","link":"","permalink":"https://navaidx.github.io/2022/07/03/%E5%9F%BA%E7%A1%80%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/","excerpt":"进制的全称是“进位计数制”，是一种人为定义的带进位的计数方法。在计算机中领域应用的比较多的是二进制、八进制、十六进制等。同一个数可以被不同的进制所表达。","text":"进制的全称是“进位计数制”，是一种人为定义的带进位的计数方法。在计算机中领域应用的比较多的是二进制、八进制、十六进制等。同一个数可以被不同的进制所表达。 常用的进制 二进制 Binary 二进制中有两个数码，分别是0和1 1eg. 0,1,10,11,100,101,110,111,1000... 八进制 Octal 八进制中有八个数码，分别是0，1，2，3，4，5，6和7 1eg. 0,1,2,3,4,5,6,7,10,11,12,13,14... 十进制 Decimal 十进制中有十个数码，分别是0，1，2，3，4，5，6，7，8，9 1eg. 0,1,2,3,4,5,6,7,8,9,10,11,12... 十六进制 Hexadecimal 十六进制中有十六个数码，分别是0，1，2，3，4，5，6，7，8，9，A，B，C，D，E，F 1eg. 0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F,10,11,12,13,14,15,16,17,18,19,1A,1B... 十进制转成其它进制十进制转其它进制可使用短除法，下面是一些示例： 十进制转二进制 十进制转八进制 十进制转十六进制 其它进制转成十进制值得注意到的是，数字的位数和进制数（如2，8，16等）有关联。比如十进制的20123的2在万位上（从右往左第5位），代表的是其位数上10的4次方的个数，即2*(10^4)。下面的例子更好的展示了这一现象。 二进制转十进制 八进制转十进制 十六进制转十进制 其它进制之间的转换二进制中，每3位对应着八进制中的1位，每4位对应十六进制的1位。如11111代表八进制中的37（前三位代表3.后三位代表7）和十六进制的1F（前四位代表1，后四位代表F）。下面是一些例子： 二进制与八进制转换 二进制与十六进制转换 八进制与十六进制转换八进制转十六进制或十六进制转八进制可以先把先它们转成二进制，再进行下一步转换。","categories":[{"name":"算法","slug":"算法","permalink":"https://navaidx.github.io/categories/%E7%AE%97%E6%B3%95/"},{"name":"基础","slug":"算法/基础","permalink":"https://navaidx.github.io/categories/%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://navaidx.github.io/tags/Java/"}]},{"title":"进站须知","slug":"进站须知","date":"2022-04-22T02:54:06.000Z","updated":"2023-07-08T10:12:28.735Z","comments":true,"path":"2022/04/22/进站须知/","link":"","permalink":"https://navaidx.github.io/2022/04/22/%E8%BF%9B%E7%AB%99%E9%A1%BB%E7%9F%A5/","excerpt":"欢迎来到Navaid，我是Eyton。这是我的个人博客，创建于2022年4月17日，主要用于记录自己的学习和生活。该博客会不定期更新。","text":"欢迎来到Navaid，我是Eyton。这是我的个人博客，创建于2022年4月17日，主要用于记录自己的学习和生活。该博客会不定期更新。 如有任何疑问,可通过邮箱「邮箱」联系我或在博客里评论。我的「领英」账号。 简介 这是一个hexo博客，基于Volantis主题搭建 本博客评论区使用Giscus 页面出现异常请刷新页面或尝试清空浏览器缓存 有关博客命名 Navaid在航空领域意为“导航系统”或者是“助航设施”。总之，希望这个博客里的内容可以帮助到有需要的人。 更多Live2d使用： 模型： live2d-widget-model-tsumiki Live2d工具： hexo-helper-live2d 背景音乐歌单： Navaid","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2022-04-16T16:00:00.000Z","updated":"2023-07-11T15:15:11.695Z","comments":false,"path":"2022/04/17/hello-world/","link":"","permalink":"https://navaidx.github.io/2022/04/17/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"博客","slug":"博客","permalink":"https://navaidx.github.io/categories/%E5%8D%9A%E5%AE%A2/"},{"name":"CS2030S","slug":"CS2030S","permalink":"https://navaidx.github.io/categories/CS2030S/"},{"name":"Hi-Fi","slug":"Hi-Fi","permalink":"https://navaidx.github.io/categories/Hi-Fi/"},{"name":"Python","slug":"Python","permalink":"https://navaidx.github.io/categories/Python/"},{"name":"VScode","slug":"VScode","permalink":"https://navaidx.github.io/categories/VScode/"},{"name":"算法","slug":"算法","permalink":"https://navaidx.github.io/categories/%E7%AE%97%E6%B3%95/"},{"name":"基础","slug":"算法/基础","permalink":"https://navaidx.github.io/categories/%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://navaidx.github.io/tags/Hexo/"},{"name":"Java","slug":"Java","permalink":"https://navaidx.github.io/tags/Java/"},{"name":"Unix","slug":"Unix","permalink":"https://navaidx.github.io/tags/Unix/"},{"name":"PE","slug":"PE","permalink":"https://navaidx.github.io/tags/PE/"},{"name":"Github","slug":"Github","permalink":"https://navaidx.github.io/tags/Github/"},{"name":"录音","slug":"录音","permalink":"https://navaidx.github.io/tags/%E5%BD%95%E9%9F%B3/"},{"name":"VScode","slug":"VScode","permalink":"https://navaidx.github.io/tags/VScode/"},{"name":"Python","slug":"Python","permalink":"https://navaidx.github.io/tags/Python/"},{"name":"Markdown","slug":"Markdown","permalink":"https://navaidx.github.io/tags/Markdown/"}]}